{"code":"/*\r\n * Copyright Â© 2020. TIBCO Software Inc.\r\n * This file is subject to the license terms contained\r\n * in the license file that is distributed with this file.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { googleGauge } from \"./visualization\";\r\n// Import the Spotfire module\r\nimport { Spotfire } from \"./api\";\r\n// Import needed types\r\n// Starting point for every mod\r\nSpotfire.initialize(function (mod) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var context, reader, gauge;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                context = mod.getRenderContext();\r\n                reader = mod.createReader(mod.visualization.data(), mod.windowSize());\r\n                return [4 /*yield*/, googleGauge()];\r\n            case 1:\r\n                gauge = _a.sent();\r\n                reader.subscribe(function render(dataView, size) {\r\n                    return __awaiter(this, void 0, void 0, function () {\r\n                        var errors, rows, hasCategory, hasMeasurement, data, marking, gauges;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0: return [4 /*yield*/, dataView.getErrors()];\r\n                                case 1:\r\n                                    errors = _a.sent();\r\n                                    if (errors.length > 0) {\r\n                                        // Data view contains errors. Display these and clear the chart to avoid\r\n                                        // getting a flickering effect with an old chart configuration later.\r\n                                        mod.controls.errorOverlay.show(errors, \"DataView\");\r\n                                        gauge.clear();\r\n                                        return [2 /*return*/];\r\n                                    }\r\n                                    mod.controls.errorOverlay.hide(\"DataView\");\r\n                                    return [4 /*yield*/, dataView.allRows()];\r\n                                case 2:\r\n                                    rows = _a.sent();\r\n                                    if (rows == null) {\r\n                                        // Return and wait for next call to render when reading data was aborted.\r\n                                        // Last rendered data view is still valid from a users perspective since\r\n                                        // a document modification was made during a progress indication.\r\n                                        return [2 /*return*/];\r\n                                    }\r\n                                    return [4 /*yield*/, dataView.categoricalAxis(\"Category\")];\r\n                                case 3:\r\n                                    hasCategory = (_a.sent()) != null;\r\n                                    return [4 /*yield*/, dataView.continuousAxis(\"Measurement\")];\r\n                                case 4:\r\n                                    hasMeasurement = (_a.sent()) != null;\r\n                                    data = rows.map(function (row) {\r\n                                        var _a;\r\n                                        return [\r\n                                            hasCategory ? row.categorical(\"Category\").formattedValue() : \"\",\r\n                                            hasMeasurement ? (_a = row.continuous(\"Measurement\").value()) !== null && _a !== void 0 ? _a : 0 : 0\r\n                                        ];\r\n                                    });\r\n                                    // Render the visualization using the transformed data\r\n                                    gauge.render(data, size);\r\n                                    return [4 /*yield*/, dataView.marking()];\r\n                                case 5:\r\n                                    marking = _a.sent();\r\n                                    gauges = gauge.element.getElementsByTagName(\"td\");\r\n                                    rows.forEach(function (row, index) {\r\n                                        gauges[index].style.background =\r\n                                            row.isMarked() && marking\r\n                                                ? \"radial-gradient(\" + marking.colorHexCode + \" 50%, transparent 100%)\"\r\n                                                : \"transparent\";\r\n                                    });\r\n                                    // Inform Spotfire that the render is complete (needed for export)\r\n                                    context.signalRenderComplete();\r\n                                    return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); });\r\n//# sourceMappingURL=main.js.map","references":["/usr/local/var/www/apps/spotfire-mods/examples/ts-dev-gauge-googlecharts/src/visualization.ts","/usr/local/var/www/apps/spotfire-mods/examples/ts-dev-gauge-googlecharts/src/api.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/main.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC9C,6BAA6B;AAC7B,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,sBAAsB;AAEtB,+BAA+B;AAC/B,QAAQ,CAAC,UAAU,CAAC,UAAM,GAAG;;;;;gBAErB,OAAO,GAAG,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAGjC,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;gBAG9D,qBAAM,WAAW,EAAE,EAAA;;gBAA3B,KAAK,GAAG,SAAmB;gBAE/B,MAAM,CAAC,SAAS,CAAC,SAAe,MAAM,CAAC,QAAQ,EAAE,IAAI;;;;;wCACpC,qBAAM,QAAQ,CAAC,SAAS,EAAE,EAAA;;oCAAnC,MAAM,GAAG,SAA0B;oCACvC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wCACnB,wEAAwE;wCACxE,qEAAqE;wCACrE,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;wCACnD,KAAK,CAAC,KAAK,EAAE,CAAC;wCACd,sBAAO;qCACV;oCAED,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oCAChC,qBAAM,QAAQ,CAAC,OAAO,EAAE,EAAA;;oCAA/B,IAAI,GAAG,SAAwB;oCACnC,IAAI,IAAI,IAAI,IAAI,EAAE;wCACd,yEAAyE;wCACzE,wEAAwE;wCACxE,iEAAiE;wCACjE,sBAAO;qCACV;oCAGiB,qBAAM,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,EAAA;;oCAAxD,WAAW,GAAG,CAAA,SAA0C,KAAI,IAAI;oCAC/C,qBAAM,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,EAAA;;oCAA7D,cAAc,GAAG,CAAA,SAA4C,KAAI,IAAI;oCAGrE,IAAI,GAAuB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;;wCAAI,OAAA;4CAC3C,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE;4CAC/D,cAAc,CAAC,CAAC,OAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,mCAAI,CAAC,CAAC,CAAC,CAAC,CAAC;yCAClE,CAAA;qCAAA,CAAC,CAAC;oCAEH,sDAAsD;oCACtD,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oCAGX,qBAAM,QAAQ,CAAC,OAAO,EAAE,EAAA;;oCAAlC,OAAO,GAAG,SAAwB;oCAClC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oCACtD,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;wCACpB,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,UAAU;4CAC1B,GAAG,CAAC,QAAQ,EAAE,IAAI,OAAO;gDACrB,CAAC,CAAC,kBAAkB,GAAG,OAAO,CAAC,YAAY,GAAG,yBAAyB;gDACvE,CAAC,CAAC,aAAa,CAAC;oCAC5B,CAAC,CAAC,CAAC;oCAEH,kEAAkE;oCAClE,OAAO,CAAC,oBAAoB,EAAE,CAAC;;;;;iBAClC,CAAC,CAAC;;;;KACN,CAAC,CAAC\",\"sourcesContent\":[\"/*\\n * Copyright Â© 2020. TIBCO Software Inc.\\n * This file is subject to the license terms contained\\n * in the license file that is distributed with this file.\\n */\\n\\nimport { googleGauge } from \\\"./visualization\\\";\\n// Import the Spotfire module\\nimport { Spotfire } from \\\"./api\\\";\\n// Import needed types\\n\\n// Starting point for every mod\\nSpotfire.initialize(async mod => {\\n    // Used later to inform Spotfire that the render is complete\\n    let context = mod.getRenderContext();\\n\\n    // Create a reader object that reacts only data and window size changes\\n    let reader = mod.createReader(mod.visualization.data(), mod.windowSize());\\n\\n    // Initialize the Google visualization\\n    let gauge = await googleGauge();\\n\\n    reader.subscribe(async function render(dataView, size) {\\n        let errors = await dataView.getErrors();\\n        if (errors.length > 0) {\\n            // Data view contains errors. Display these and clear the chart to avoid\\n            // getting a flickering effect with an old chart configuration later.\\n            mod.controls.errorOverlay.show(errors, \\\"DataView\\\");\\n            gauge.clear();\\n            return;\\n        }\\n\\n        mod.controls.errorOverlay.hide(\\\"DataView\\\");\\n        let rows = await dataView.allRows();\\n        if (rows == null) {\\n            // Return and wait for next call to render when reading data was aborted.\\n            // Last rendered data view is still valid from a users perspective since\\n            // a document modification was made during a progress indication.\\n            return;\\n        }\\n\\n        // Check for empty axis expression before.\\n        let hasCategory = await dataView.categoricalAxis(\\\"Category\\\") != null;\\n        let hasMeasurement = await dataView.continuousAxis(\\\"Measurement\\\") != null;\\n\\n        // Transform the rows to the google visualization format.\\n        let data: [string, number][] = rows.map(row => [\\n            hasCategory ? row.categorical(\\\"Category\\\").formattedValue() : \\\"\\\", \\n            hasMeasurement ? row.continuous(\\\"Measurement\\\").value() ?? 0 : 0\\n        ]);\\n\\n        // Render the visualization using the transformed data\\n        gauge.render(data, size);\\n\\n        // Add marking highlight using the marking color, if marking is enabled.\\n        let marking = await dataView.marking();\\n        let gauges = gauge.element.getElementsByTagName(\\\"td\\\");\\n        rows.forEach((row, index) => {\\n            gauges[index].style.background =\\n                row.isMarked() && marking\\n                    ? \\\"radial-gradient(\\\" + marking.colorHexCode + \\\" 50%, transparent 100%)\\\"\\n                    : \\\"transparent\\\";\\n        });\\n\\n        // Inform Spotfire that the render is complete (needed for export)\\n        context.signalRenderComplete();\\n    });\\n});\\n\"]}"}
