{"code":"/*\r\n * Copyright © 2020. TIBCO Software Inc.\r\n * This file is subject to the license terms contained\r\n * in the license file that is distributed with this file.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\n// Import the Spotfire module\r\nimport { Spotfire } from \"./api\";\r\n// Import needed types\r\n// Starting point for every mod\r\nSpotfire.initialize(function (mod) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var context, reader;\r\n    return __generator(this, function (_a) {\r\n        context = mod.getRenderContext();\r\n        reader = mod.createReader(mod.visualization.data(), mod.windowSize());\r\n        reader.subscribe(function render(dataView, size) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var errors, rows;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, dataView.getErrors()];\r\n                        case 1:\r\n                            errors = _a.sent();\r\n                            if (errors.length > 0) {\r\n                                // Data view contains errors. Display these and clear the chart to avoid\r\n                                // getting a flickering effect with an old chart configuration later.\r\n                                mod.controls.errorOverlay.show(errors, \"DataView\");\r\n                                return [2 /*return*/];\r\n                            }\r\n                            mod.controls.errorOverlay.hide(\"DataView\");\r\n                            return [4 /*yield*/, dataView.allRows()];\r\n                        case 2:\r\n                            rows = _a.sent();\r\n                            console.log(rows);\r\n                            alert('hello');\r\n                            // Inform Spotfire that the render is complete (needed for export)\r\n                            context.signalRenderComplete();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return [2 /*return*/];\r\n    });\r\n}); });\r\n//# sourceMappingURL=main.js.map","references":["/usr/local/var/www/apps/spotfire-mods/examples/ts-dev-menu/src/api.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/main.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;;AAGH,6BAA6B;AAC7B,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,sBAAsB;AAEtB,+BAA+B;AAC/B,QAAQ,CAAC,UAAU,CAAC,UAAM,GAAG;;;QAErB,OAAO,GAAG,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAGjC,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QAE1E,MAAM,CAAC,SAAS,CAAC,SAAe,MAAM,CAAC,QAAQ,EAAE,IAAI;;;;;gCACpC,qBAAM,QAAQ,CAAC,SAAS,EAAE,EAAA;;4BAAnC,MAAM,GAAG,SAA0B;4BACvC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gCACnB,wEAAwE;gCACxE,qEAAqE;gCACrE,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gCAEnD,sBAAO;6BACV;4BAED,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BAChC,qBAAM,QAAQ,CAAC,OAAO,EAAE,EAAA;;4BAA/B,IAAI,GAAG,SAAwB;4BACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClB,KAAK,CAAC,OAAO,CAAC,CAAC;4BAEf,kEAAkE;4BAClE,OAAO,CAAC,oBAAoB,EAAE,CAAC;;;;;SAClC,CAAC,CAAC;;;KACN,CAAC,CAAC\",\"sourcesContent\":[\"/*\\n * Copyright © 2020. TIBCO Software Inc.\\n * This file is subject to the license terms contained\\n * in the license file that is distributed with this file.\\n */\\n\\n\\n// Import the Spotfire module\\nimport { Spotfire } from \\\"./api\\\";\\n// Import needed types\\n\\n// Starting point for every mod\\nSpotfire.initialize(async mod => {\\n    // Used later to inform Spotfire that the render is complete\\n    let context = mod.getRenderContext();\\n\\n    // Create a reader object that reacts only data and window size changes\\n    let reader = mod.createReader(mod.visualization.data(), mod.windowSize());\\n\\n    reader.subscribe(async function render(dataView, size) {\\n        let errors = await dataView.getErrors();\\n        if (errors.length > 0) {\\n            // Data view contains errors. Display these and clear the chart to avoid\\n            // getting a flickering effect with an old chart configuration later.\\n            mod.controls.errorOverlay.show(errors, \\\"DataView\\\");\\n\\n            return;\\n        }\\n\\n        mod.controls.errorOverlay.hide(\\\"DataView\\\");\\n        let rows = await dataView.allRows();\\n        console.log(rows);\\n        alert('hello');\\n\\n        // Inform Spotfire that the render is complete (needed for export)\\n        context.signalRenderComplete();\\n    });\\n});\\n\"]}"}
