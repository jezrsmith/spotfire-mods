{"code":"/*\r\n * Copyright © 2020. TIBCO Software Inc.\r\n * This file is subject to the license terms contained\r\n * in the license file that is distributed with this file.\r\n */\r\nimport { __spreadArrays } from \"tslib\";\r\nimport { findElem, maxInList } from \"./util\";\r\nvar visualizationElementId = \"#chart_div\";\r\n/**\r\n * This function loads the google gauge visualization asynchronously and returns an API with a render function.\r\n */\r\nexport function googleGauge() {\r\n    var chart;\r\n    var element = findElem(visualizationElementId);\r\n    return new Promise(function (resolve) {\r\n        google.charts.load(\"current\", { packages: [\"gauge\"] });\r\n        google.charts.setOnLoadCallback(function () {\r\n            chart = new google.visualization.Gauge(element);\r\n            // Resolve the promise when the charting library is loaded.\r\n            resolve({\r\n                render: render,\r\n                clear: clear,\r\n                element: element\r\n            });\r\n        });\r\n    });\r\n    /** Render the visualization */\r\n    function render(data, size) {\r\n        var maxValue = maxInList(data);\r\n        var options = {\r\n            width: size.width,\r\n            height: size.height,\r\n            redFrom: maxValue * 0.9,\r\n            redTo: maxValue,\r\n            yellowFrom: maxValue * 0.75,\r\n            yellowTo: maxValue * 0.9,\r\n            max: maxValue\r\n        };\r\n        var dataTable = google.visualization.arrayToDataTable(__spreadArrays([[\"Label\", \"Value\"]], data));\r\n        chart.draw(dataTable, options);\r\n    }\r\n    /** Clear the visualization */\r\n    function clear() {\r\n        render([], { width: 0, height: 0 });\r\n    }\r\n}\r\n//# sourceMappingURL=visualization.js.map","references":["/usr/local/var/www/apps/spotfire-mods/examples/ts-dev-gauge-googlecharts/src/util.ts","/usr/local/var/www/apps/spotfire-mods/examples/ts-dev-gauge-googlecharts/spotfire/spotfire-api.d.ts"],"map":"{\"version\":3,\"file\":\"visualization.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/visualization.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAG7C,IAAM,sBAAsB,GAAG,YAAY,CAAC;AAE5C;;GAEG;AACH,MAAM,UAAU,WAAW;IACvB,IAAI,KAAqC,CAAC;IAC1C,IAAI,OAAO,GAAG,QAAQ,CAAC,sBAAsB,CAAC,CAAC;IAE/C,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;QACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC5B,KAAK,GAAG,IAAK,MAAM,CAAC,aAAqB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzD,2DAA2D;YAC3D,OAAO,CAAC;gBACJ,MAAM,QAAA;gBACN,KAAK,OAAA;gBACL,OAAO,SAAA;aACV,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,+BAA+B;IAC/B,SAAS,MAAM,CAAC,IAAwB,EAAE,IAAU;QAChD,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,OAAO,GAAG;YACV,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,QAAQ,GAAG,GAAG;YACvB,KAAK,EAAE,QAAQ;YACf,UAAU,EAAE,QAAQ,GAAG,IAAI;YAC3B,QAAQ,EAAE,QAAQ,GAAG,GAAG;YACxB,GAAG,EAAE,QAAQ;SAChB,CAAC;QAEF,IAAI,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,gBAAgB,iBAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAK,IAAI,EAAE,CAAC;QAErF,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IAED,8BAA8B;IAC9B,SAAS,KAAK;QACV,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;AACL,CAAC\",\"sourcesContent\":[\"/*\\n * Copyright © 2020. TIBCO Software Inc.\\n * This file is subject to the license terms contained\\n * in the license file that is distributed with this file.\\n */\\n\\nimport { findElem, maxInList } from \\\"./util\\\";\\nimport { Size } from \\\"spotfire-api\\\";\\n\\nconst visualizationElementId = \\\"#chart_div\\\";\\n\\n/**\\n * This function loads the google gauge visualization asynchronously and returns an API with a render function.\\n */\\nexport function googleGauge(): Promise<{ render: typeof render; clear: () => void; element: HTMLElement }> {\\n    let chart: google.visualization.LineChart;\\n    let element = findElem(visualizationElementId);\\n\\n    return new Promise(resolve => {\\n        google.charts.load(\\\"current\\\", { packages: [\\\"gauge\\\"] });\\n        google.charts.setOnLoadCallback(() => {\\n            chart = new (google.visualization as any).Gauge(element);\\n            // Resolve the promise when the charting library is loaded.\\n            resolve({\\n                render,\\n                clear,\\n                element\\n            });\\n        });\\n    });\\n\\n    /** Render the visualization */\\n    function render(data: [string, number][], size: Size) {\\n        let maxValue = maxInList(data);\\n\\n        let options = {\\n            width: size.width,\\n            height: size.height,\\n            redFrom: maxValue * 0.9,\\n            redTo: maxValue,\\n            yellowFrom: maxValue * 0.75,\\n            yellowTo: maxValue * 0.9,\\n            max: maxValue\\n        };\\n\\n        let dataTable = google.visualization.arrayToDataTable([[\\\"Label\\\", \\\"Value\\\"], ...data]);\\n\\n        chart.draw(dataTable, options);\\n    }\\n\\n    /** Clear the visualization */\\n    function clear() {\\n        render([], { width: 0, height: 0 });\\n    }\\n}\\n\"]}"}
